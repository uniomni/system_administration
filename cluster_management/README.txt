This is a collection of Python scripts that document the
installation of the Beowulf cluster, alamba, at the
Australia-Indonesia Facility for Disaster Reduction (AIFDR) in Jakarta.

The scripts are not thought to be general purpose installation tools; rather
they serve as tools to automate and document the procedures involved. However,
the scripts are thought to be flexible enough to allow change of parameters such
as network addresses, adding more nodes to the cluster, changing names and locations of files and so on.

The scripts must be run as system administrator (root or using sudo)
on the head node using a Python interpretor - e.g. python <script name>


TERMINOLOGY

The cluster consists of the following components:
* Head node named 'alamba' which is the entry point to the cluster.
* Compute nodes named 'node1', 'node2', etc are accessible from the
  head node through the ssh protocol (e.g. ssh user@node6) and represent
  the main computational resources of the cluster. Compute nodes are also
  generically referred to as clients.
* Ubuntu is the operating system used for the cluster. It is a variant of
  the Linux family based on the Debian packaging system and has been chosen
  based on its robustness, efficiency and ease of maintenance.



Below is a short description of the scripts organised by purpose:


CONFIGURATION

config.py: This script is used by all other scripts to access shared
           information about names, network addresses,
	   file locations etc.
	   It is not intended to run by itself, but should be edited
           to reflect any changes in the cluster configuration.



INITIALISATION OF NEW INSTALLATION

initialise_server_network.py: This script attempts to connect the head node
                              to the internet following a fresh installation
                              of Ubuntu. SKIP this step if you already have
                              a configured network.

install_initial_packages.py:  This scripts will update the ubuntu software
                              database and install critical packages for
                              use with data distribution and cluster
			      interconnect such as Network File System (NFS),
			      Secure Shell protocol (SSH) and network tools.
manual component:	      There are a few manual steps that must be taken
       			      to get the new installation ready. They are
			      * Copy and unpack ubuntu_basesystem.tgz in /
                                (unless already there - as per instructions later)
                              * Create /client_filesystems (or
                                whatever name client_image_dir in config.py
				 points to)
                              * Create directory /client_filesystems/shared
			      * Move /home and create symlinks:
                                mv /home /client_filesystem/shared
			        ln -s /client_filesystems/shared /shared
                                ln -s /shared/home /home

			      It may be necessary to reboot head node
			      once at this point.


BUILD AND CONFIGURE CLUSTER

configure_server.py: 	Create configuration files necessary for the head
		     	node to serve the compute nodes.
build_clients.py:    	Create an area on the head node for each compute node
		     	and copy system files to it.
configure_clients.py:	Create infrastructure for clients to boot from head node
	             	and access the system files. Also set up the network for
		     	each client.
start_services.py:   	Start services on head node bringing configuration
		     	intro
synchronise_clients.py: Copy any newly installed software packages or
			newly created user identities across to all clients.
			This script should be run automatically every so often
			and every time new software has been installed on
			the head node or a new user has been created.
build_cluster.py:    	Run all five scritps needed to build the cluster



MISCELLANEOUS

utilities.py: This scripts contains functions used by other scripts.


DIAGNOSTICS

ping_clients: Checks that clients can be contacted from the head node.

NETWORK


Passwordless connection
ssh-keygen -t dsa

at the Linux prompt; do not choose any passphrase, rather just hit RETURN. Then copy .ssh/id_dsa.pu
b to .ssh/authorized_keys2 by

cp .ssh/id_dsa.pub .ssh/authorized_keys2

KNOWN HOSTS
Also, once the file .ssh/known_hosts has been generated by logging into all nodes, it can be copied to the systemwide file /etc/ssh/ssh_known_hosts and work for all users.


Creating ubuntu_basesystem.tgz:

Fresh installation steps done to provide ubuntu basesystem:
* Install Ubuntu 11.04 desktop on a server somewhere
* Add user named 'install'
* apt-get install openssh-server
* apt-get install nfs-kernel-server
* Edit exports on server with the line
   / 192.168.11.1/255.255.255.0(rw,no_root_squash,async,no_subtree_check)
   (or using the subnet where cluster sees the server, e.g. 192.168.40.1)
* exportfs -rv (or exportfs -a)
* Move to cluster head node and do the following
* mount -tnfs -onolock server_if:/ /mnt
* cp -axv /mnt/. /ubuntu_basesystem/.
* tar cvfz /ubuntu_basesystem.tgz /ubuntu_basesystem (not strictly needed)


LINKS

http://www.ubuntugeek.com/how-to-install-and-configure-dhcp-server-in-ubuntu-server.html
https://help.ubuntu.com/community/dhcp3-server



